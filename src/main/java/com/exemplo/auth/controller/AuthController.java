package com.exemplo.auth.controller;

import com.exemplo.auth.dto.AuthResponse;
import com.exemplo.auth.dto.LoginRequest;
import com.exemplo.auth.model.User;
import com.exemplo.auth.repository.UserRepository;
import com.exemplo.auth.service.JwtService;
import io.jsonwebtoken.Claims;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/auth")
public class AuthController {
    
    private static final Logger logger = LoggerFactory.getLogger(AuthController.class);
    private final UserRepository userRepository;
    private final JwtService jwtService;
    
    /**
     * Construtor com inje√ß√£o de depend√™ncias
     */
    public AuthController(UserRepository userRepository, JwtService jwtService) {
        this.userRepository = userRepository;
        this.jwtService = jwtService;
    }
    
    /**
     * Autentica usu√°rio e gera token JWT
     * @param request dados de login (login/senha)
     * @return token JWT + dados do usu√°rio ou 401 se inv√°lido
     */
    @PostMapping("/login")
    public ResponseEntity<AuthResponse> login(@RequestBody LoginRequest request) {
        logger.info("[LOGIN] üîë Tentativa de autentica√ß√£o - Login: {}", request.getLogin());
        
        User user = userRepository.findByLogin(request.getLogin());
        if (user == null) {
            logger.warn("[LOGIN] ‚ùå Usu√°rio n√£o encontrado - Login: {}", request.getLogin());
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }
        
        if (!user.getSenha().equals(request.getSenha())) {
            logger.warn("[LOGIN] ‚ùå Credenciais inv√°lidas - Login: {}", request.getLogin());
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }
        
        logger.info("[LOGIN] üîç Gerando token JWT para usu√°rio: {}", user.getLogin());
        String token = jwtService.generateToken(user.getLogin(), user.getRole().name(), user.getId());
        
        logger.info("[LOGIN] ‚úÖ Autentica√ß√£o bem-sucedida - Login: {}, Role: {}, UserId: {}", 
                   user.getLogin(), user.getRole().name(), user.getId());
        
        return ResponseEntity.ok(new AuthResponse(token, user.getLogin(), user.getRole().name(), user.getId()));
    }
    
    /**
     * Valida token JWT e retorna claims
     * @param authHeader header Authorization com Bearer token
     * @return claims do token ou 401 se inv√°lido
     */
    @PostMapping("/validate")
    public ResponseEntity<Claims> validate(@RequestHeader("Authorization") String authHeader) {
        logger.info("[VALIDATE] üîç Validando token JWT recebido do Gateway");
        
        try {
            String token = authHeader.replace("Bearer ", "");
            logger.debug("[VALIDATE] üîë Processando token: {}...", token.substring(0, Math.min(20, token.length())));
            
            Claims claims = jwtService.validateToken(token);
            
            String subject = claims.getSubject();
            String role = (String) claims.get("role");
            Integer userId = (Integer) claims.get("userId");
            
            logger.info("[VALIDATE] ‚úÖ Token v√°lido - Subject: {}, Role: {}, UserId: {}", subject, role, userId);
            
            return ResponseEntity.ok(claims);
        } catch (Exception e) {
            logger.warn("[VALIDATE] ‚ùå Token inv√°lido - Erro: {}", e.getMessage());
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }
    }
    

}